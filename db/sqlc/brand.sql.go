// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: brand.sql

package db

import (
	"context"
)

const countBrandByName = `-- name: CountBrandByName :one
SELECT COUNT(id)
FROM brands
WHERE LOWER("name") = LOWER($1)
LIMIT 1
`

func (q *Queries) CountBrandByName(ctx context.Context, lower string) (int64, error) {
	row := q.queryRow(ctx, q.countBrandByNameStmt, countBrandByName, lower)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createBrand = `-- name: CreateBrand :one
INSERT INTO brands ("name")
VALUES ($1)
RETURNING id, name
`

func (q *Queries) CreateBrand(ctx context.Context, name string) (Brand, error) {
	row := q.queryRow(ctx, q.createBrandStmt, createBrand, name)
	var i Brand
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const deleteBrand = `-- name: DeleteBrand :exec
DELETE FROM brands WHERE id = $1
`

func (q *Queries) DeleteBrand(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteBrandStmt, deleteBrand, id)
	return err
}

const getBrandById = `-- name: GetBrandById :one
SELECT id
      ,"name"
FROM brands
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetBrandById(ctx context.Context, id int64) (Brand, error) {
	row := q.queryRow(ctx, q.getBrandByIdStmt, getBrandById, id)
	var i Brand
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}
