// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.countBrandByNameStmt, err = db.PrepareContext(ctx, countBrandByName); err != nil {
		return nil, fmt.Errorf("error preparing query CountBrandByName: %w", err)
	}
	if q.createBrandStmt, err = db.PrepareContext(ctx, createBrand); err != nil {
		return nil, fmt.Errorf("error preparing query CreateBrand: %w", err)
	}
	if q.createCarStmt, err = db.PrepareContext(ctx, createCar); err != nil {
		return nil, fmt.Errorf("error preparing query CreateCar: %w", err)
	}
	if q.deleteBrandStmt, err = db.PrepareContext(ctx, deleteBrand); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteBrand: %w", err)
	}
	if q.deleteCarStmt, err = db.PrepareContext(ctx, deleteCar); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteCar: %w", err)
	}
	if q.getAllCarsStmt, err = db.PrepareContext(ctx, getAllCars); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllCars: %w", err)
	}
	if q.getBrandByIdStmt, err = db.PrepareContext(ctx, getBrandById); err != nil {
		return nil, fmt.Errorf("error preparing query GetBrandById: %w", err)
	}
	if q.getCarByIdStmt, err = db.PrepareContext(ctx, getCarById); err != nil {
		return nil, fmt.Errorf("error preparing query GetCarById: %w", err)
	}
	if q.searchCarsStmt, err = db.PrepareContext(ctx, searchCars); err != nil {
		return nil, fmt.Errorf("error preparing query SearchCars: %w", err)
	}
	if q.updateCarStmt, err = db.PrepareContext(ctx, updateCar); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateCar: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.countBrandByNameStmt != nil {
		if cerr := q.countBrandByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countBrandByNameStmt: %w", cerr)
		}
	}
	if q.createBrandStmt != nil {
		if cerr := q.createBrandStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createBrandStmt: %w", cerr)
		}
	}
	if q.createCarStmt != nil {
		if cerr := q.createCarStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createCarStmt: %w", cerr)
		}
	}
	if q.deleteBrandStmt != nil {
		if cerr := q.deleteBrandStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteBrandStmt: %w", cerr)
		}
	}
	if q.deleteCarStmt != nil {
		if cerr := q.deleteCarStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteCarStmt: %w", cerr)
		}
	}
	if q.getAllCarsStmt != nil {
		if cerr := q.getAllCarsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllCarsStmt: %w", cerr)
		}
	}
	if q.getBrandByIdStmt != nil {
		if cerr := q.getBrandByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getBrandByIdStmt: %w", cerr)
		}
	}
	if q.getCarByIdStmt != nil {
		if cerr := q.getCarByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCarByIdStmt: %w", cerr)
		}
	}
	if q.searchCarsStmt != nil {
		if cerr := q.searchCarsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing searchCarsStmt: %w", cerr)
		}
	}
	if q.updateCarStmt != nil {
		if cerr := q.updateCarStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateCarStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                   DBTX
	tx                   *sql.Tx
	countBrandByNameStmt *sql.Stmt
	createBrandStmt      *sql.Stmt
	createCarStmt        *sql.Stmt
	deleteBrandStmt      *sql.Stmt
	deleteCarStmt        *sql.Stmt
	getAllCarsStmt       *sql.Stmt
	getBrandByIdStmt     *sql.Stmt
	getCarByIdStmt       *sql.Stmt
	searchCarsStmt       *sql.Stmt
	updateCarStmt        *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                   tx,
		tx:                   tx,
		countBrandByNameStmt: q.countBrandByNameStmt,
		createBrandStmt:      q.createBrandStmt,
		createCarStmt:        q.createCarStmt,
		deleteBrandStmt:      q.deleteBrandStmt,
		deleteCarStmt:        q.deleteCarStmt,
		getAllCarsStmt:       q.getAllCarsStmt,
		getBrandByIdStmt:     q.getBrandByIdStmt,
		getCarByIdStmt:       q.getCarByIdStmt,
		searchCarsStmt:       q.searchCarsStmt,
		updateCarStmt:        q.updateCarStmt,
	}
}
